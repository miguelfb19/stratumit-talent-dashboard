// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum LanguajeLevel {
  Basic
  Intermedium
  Advance
  Native
}

enum CategoryTech {
  Frontend
  Backend
  DevOps
  Testing
  Database
  Design
  Mobile
  CMS
  Others
}

model User {
  id          String     @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  password    String
  birthDate   DateTime
  country     String
  createdDate DateTime   @default(now())
  roles       UserRole[]
  isVerified  Boolean    @default(false)

  // Relations

  profile Profile?
}

model Profile {
  id               String  @id @default(uuid())
  motivationText   String?
  timezone         String?
  phoneNumber      String?
  imageUrl         String?
  profileCompleted Boolean @default(false)

  // Relations

  // one-to-one relation with User
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  careerTimeline      JobExperiences[]
  languajes           ProfileLanguajes[]
  technologies        ProfileTechnologies[]
  educationalProjects EducationalProject[]
}

model ProfileLanguajes {
  level LanguajeLevel

  // Relations
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  languaje   Languaje @relation(fields: [languajeId], references: [id], onDelete: Cascade)
  languajeId String

  // Composite primary key to avoid duplicates
  @@id([profileId, languajeId, level])
}

model Languaje {
  id   String @id @default(uuid())
  name String @unique

  // Relations 

  profileLanguajes ProfileLanguajes[]
}

model ProfileTechnologies {
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
  technologyId String

  // Composite primary key to avoid duplicates
  @@id([profileId, technologyId])
}

model Technology {
  id   String @id @default(uuid())
  name String @unique

  // Relations
  category CategoryTech

  profileTechnologies ProfileTechnologies[]
}

model JobExperiences {
  id          String    @id @default(uuid())
  description String
  role        String
  company     String
  startDate   DateTime
  finishDate  DateTime?

  // Relations 

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
}

model EducationalProject {
  id          String    @id @default(uuid())
  projectName String
  description String
  startDate   DateTime
  finishDate  DateTime?
  link        String?

  // Relations 

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  permissions RolePermission[]
  users       UserRole[]
}

model Permission {
  id    String           @id @default(uuid())
  name  String           @unique
  roles RolePermission[]
}

model UserRole {
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}
