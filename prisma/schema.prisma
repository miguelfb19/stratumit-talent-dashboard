// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LanguajeLevel {
  Basic
  Intermedium
  Higth
  Native
}

enum Role {
  user
  talent
  admin
}

model User {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  password    String
  birthDate   DateTime
  country     String
  createdDate DateTime @default(now())
  role        Role[]   @default([user])
  isVerified  Boolean  @default(false)
  imageUrl    String?

  // Relations

  profile Profile?
}

model Profile {
  id             String  @id @default(uuid())
  motivationText String?
  timezone       String

  // Relations

  // one-to-one relation with User
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  careerTimeline      JobExperiences[]
  languajes           ProfileLanguajes[]
  technologies        ProfileTechnologies[]
  educationalProjects EducationalProject[]
}

model ProfileLanguajes {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  languaje   Languaje @relation(fields: [languajeId], references: [id])
  languajeId String

  // Composite primary key to avoid duplicates
  @@id([profileId, languajeId])
}

model Languaje {
  id    String        @id @default(uuid())
  name  String
  level LanguajeLevel

  // Relations 

  profileLanguajes ProfileLanguajes[]
}

model ProfileTechnologies {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  technology   Technology @relation(fields: [technologyId], references: [id])
  technologyId String

  // Composite primary key to avoid duplicates
  @@id([profileId, technologyId])
}

model Technology {
  id   String @id @default(uuid())
  name String

  // Relations

  profileTechnologies ProfileTechnologies[]

  educationalProjects EducationalProject? @relation(fields: [projectId], references: [id])
  projectId           String?
}

model JobExperiences {
  id                       String    @id @default(uuid())
  jobExperienceDescription String
  role                     String
  company                  String
  startDate                DateTime
  finishDate               DateTime?

  // Relations 

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @unique
}

model EducationalProject {
  id           String       @id @default(uuid())
  projectName  String
  technologies Technology[]

  // Relations 

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}
