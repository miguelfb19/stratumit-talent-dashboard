// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LanguajeLevel {
  Basic
  Intermedium
  Advance
  Native
}

enum CategoryTech {
  Frontend
  Backend
  DevOps
  Testing
  Database
  Design
  Mobile
  CMS
  Others
}

enum Role {
  user
  talent
  admin
}

model User {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String
  password    String
  birthDate   DateTime
  country     String
  createdDate DateTime @default(now())
  roles       Role[]   @default([user])
  isVerified  Boolean  @default(false)
  imageUrl    String?

  // Relations

  profile Profile?
}

model Profile {
  id             String  @id @default(uuid())
  motivationText String?
  timezone       String?
  phoneNumber    String?

  // Relations

  // one-to-one relation with User
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  careerTimeline      JobExperiences[]
  languajes           ProfileLanguajes[]
  technologies        ProfileTechnologies[]
  educationalProjects EducationalProject[]
}

model ProfileLanguajes {
  level LanguajeLevel

  // Relations
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  languaje   Languaje @relation(fields: [languajeId], references: [id], onDelete: Cascade)
  languajeId String

  // Composite primary key to avoid duplicates
  @@id([profileId, languajeId, level])
}

model Languaje {
  id   String @id @default(uuid())
  name String @unique

  // Relations 

  profileLanguajes ProfileLanguajes[]
}

model ProfileTechnologies {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  technology   Technology @relation(fields: [technologyId], references: [id])
  technologyId String

  // Composite primary key to avoid duplicates
  @@id([profileId, technologyId])
}

model Technology {
  id   String @id @default(uuid())
  name String @unique

  // Relations
  category CategoryTech

  profileTechnologies ProfileTechnologies[]
}

model JobExperiences {
  id          String    @id @default(uuid())
  description String
  role        String
  company     String
  startDate   DateTime
  finishDate  DateTime?

  // Relations 

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

model EducationalProject {
  id               String    @id @default(uuid())
  projectName      String
  description      String
  startDate        DateTime
  finishDate       DateTime?
  link             String?

  // Relations 

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}
